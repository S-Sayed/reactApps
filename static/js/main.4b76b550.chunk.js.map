{"version":3,"sources":["logo.svg","components/Welcome/welcome.js","components/Welcome/greet.js","components/listusers/listUsers.js","components/login/login.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Component","Greet","ListUsers","map","name","Login","props","login","validateCredentials","state","username","password","setState","isLoggedIn","message","msgs","this","className","style","height","marginTop","id","type","value","onChange","event","target","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"mMAAAA,EAAOC,QAAU,IAA0B,kC,0ICErBC,Y,KCIPC,ICaAC,E,uKAZP,OACI,6BACI,4BAHM,CAAC,QAAS,OAAQ,OAAQ,QAKlBC,KAAI,SAAAC,GAAI,OAAI,4BAAKA,Y,GARvBJ,aC2FTK,E,kDAzFX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAUVC,MAAQ,WACJ,EAAKC,sBACsB,SAAvB,EAAKC,MAAMC,UAA8C,SAAvB,EAAKD,MAAME,UAC7C,EAAKC,SAAS,CAAEC,YAAY,KAdjB,EAkBnBL,oBAAsB,WAClB,EAAKI,SAAS,CAAEE,QAAS,KACzB,IAAIC,EAAO,GAEL,EAAKN,MAAMC,UAAe,EAAKD,MAAME,SAET,SAAvB,EAAKF,MAAMC,UAA8C,SAAvB,EAAKD,MAAME,WACpDI,EAAO,yEAFPA,EAAO,kCAKX,EAAKH,SAAS,CAAEE,QAASC,KAzBzB,EAAKN,MAAQ,CACTC,SAAU,GACVC,SAAU,GACVG,QAAS,GACTD,YAAY,GAPD,E,qDA+BT,IAAD,OACL,OAAIG,KAAKP,MAAMI,WAEP,yBAAKI,UAAU,gBAAf,WACaD,KAAKP,MAAMC,SAEpB,kBAAC,EAAD,OAKJ,6BACG,yBAAKO,UAAU,WAAWC,MAAO,CAAEC,OAAQ,OAAQC,UAAW,SACxDJ,KAAKP,MAAMK,SAGhB,+BACI,+BACI,4BACI,yCAGA,4BACI,2BAAOO,GAAG,WAAWC,KAAK,OACtBC,MAAOP,KAAKP,MAAMC,SAClBc,SAAU,SAACC,GAAD,OAAW,EAAKb,SAAS,CAAEF,SAAUe,EAAMC,OAAOH,aAGxE,4BACI,yCAEA,4BACI,2BAAOF,GAAG,WAAWC,KAAK,WACtBC,MAAOP,KAAKP,MAAME,SAClBa,SAAU,SAACC,GAAD,OAAW,EAAKb,SAAS,CAAED,SAAUc,EAAMC,OAAOH,aAGxE,4BACI,6BACA,4BACI,4BAAQI,QAASX,KAAKT,OAAtB,kB,GAxEhBP,aCkBL4B,MAff,WACE,OAUA,kBAAC,EAAD,OCNkBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMhC,c","file":"static/js/main.4b76b550.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\n\r\nclass Welcome extends Component {\r\n    render() {\r\n        return (<h1>Hello From Welcome Component</h1>);\r\n    }\r\n}\r\n\r\nexport default Welcome;","import React, { Component } from 'react';\r\n\r\nfunction Greet() {\r\n    return (<h1>Hello From Greet Component</h1>);\r\n}\r\n\r\nexport default Greet;","import React, { Component } from 'react'\r\nimport '../common/common.css'\r\n\r\nclass ListUsers extends Component {\r\n\r\n    render() {\r\n        const names = ['Sameh', 'Sila', 'Adam', 'Mina']\r\n        return (\r\n            <div>\r\n                <ul>\r\n                    {\r\n                        names.map(name => <li>{name}</li>)\r\n                    }\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ListUsers;","import React, { Component } from 'react'\r\nimport '../common/common.css'\r\nimport ListUsers from '../listusers/listUsers'\r\n\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n            message: '',\r\n            isLoggedIn: false\r\n        }\r\n    }\r\n\r\n    login = () => {\r\n        this.validateCredentials();\r\n        if (this.state.username == 'admin' && this.state.password == 'admin') {\r\n            this.setState({ isLoggedIn: true })\r\n        }\r\n    }\r\n\r\n    validateCredentials = () => {\r\n        this.setState({ message: '' });\r\n        var msgs = '';\r\n\r\n        if (!(this.state.username) || !(this.state.password)) {\r\n            msgs = 'username, passowrd are required';\r\n        } else if (this.state.username != 'admin' || this.state.password != 'admin') {\r\n            msgs = 'username or passowrd is invalid, For testing, you can use admin/admin';\r\n        }\r\n\r\n        this.setState({ message: msgs });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.isLoggedIn) {\r\n            return (\r\n                <div className=\"successLogin\">\r\n                    Welcome {this.state.username}\r\n\r\n                    <ListUsers />\r\n                </div>\r\n            )\r\n        } else\r\n            return (\r\n                <div>\r\n                   <div className='errorMsg' style={{ height: '30px', marginTop: '10px' }}>\r\n                        {this.state.message}\r\n                    </div>\r\n\r\n                    <table>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>UserName:\r\n                    </td>\r\n\r\n                                <td>\r\n                                    <input id=\"username\" type=\"text\"\r\n                                        value={this.state.username}\r\n                                        onChange={(event) => this.setState({ username: event.target.value })} />\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Password:\r\n                    </td>\r\n                                <td>\r\n                                    <input id=\"password\" type=\"password\"\r\n                                        value={this.state.password}\r\n                                        onChange={(event) => this.setState({ password: event.target.value })} />\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td></td>\r\n                                <td>\r\n                                    <button onClick={this.login}>Login</button>\r\n                                    {/*  \r\n                                1- should be arrow handler function to see this.xyz\r\n                                    <button onClick={this.login}>Login</button>\r\n                                2- can be arrow handler/ normal js function to see this.xyz\r\n                                    <button onClick={() => this.login()}>Login</button>\r\n                                3- can be arrow handler/ normal js function to see this.xyz\r\n                                    <button onClick={(event) => this.login(event)}>Login</button>\r\n                            */}\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            )\r\n    }\r\n}\r\n\r\nexport default Login","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Welcome from './components/Welcome/welcome';\nimport Greet from './components/Welcome/greet';\nimport Login from './components/login/login';\n\nfunction App() {\n  return (\n    /*<div className=\"App\">\n      <header className=\"App-header\">\n        <h>Hello From App component</h>\n        <Welcome />\n        <Greet />\n      </header>\n    </div>\n  */\n\n  <Login />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}