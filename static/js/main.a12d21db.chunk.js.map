{"version":3,"sources":["logo.svg","components/deletePost/deletePost.js","components/listPosts/listPosts.js","components/login/login.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","DeletePost","props","deletePost","posts","postId","newPosts","filter","post","id","handler","onClick","Component","ListPosts","updatePosts","setState","state","errMessage","axios","get","then","response","console","log","data","slice","map","title","catch","error","message","this","style","color","key","Login","login","msgs","validateCredentials","isLoggedIn","username","password","Fragment","className","height","marginTop","type","value","onChange","event","target","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a12d21db.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\r\n\r\nclass DeletePost extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    deletePost = () => {\r\n        // just for testing deletion purpose\r\n        const { posts, postId } = this.props\r\n        var newPosts = posts.filter(function (post) {\r\n            return post.id !== postId;\r\n        });\r\n\r\n        this.props.handler(newPosts)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <button onClick={(props) => this.deletePost(props)}>X</button>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DeletePost;","import React, { Component } from 'react'\r\nimport '../common/common.css'\r\nimport axios from 'axios'\r\nimport './listPosts.css'\r\nimport DeletePost from '../deletePost/deletePost'\r\n\r\nclass ListPosts extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            posts: [],\r\n            errMessage: '',\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get('https://jsonplaceholder.typicode.com/posts').then(response => {\r\n            console.log(response);\r\n            this.setState({\r\n                // just for displying 10 elements and updating the post's titles\r\n                posts: response.data.slice(0, 10).map(post => {\r\n                    return { id: post.id, title: \"Post # \" + post.id }\r\n                })\r\n            })\r\n        }).catch(error => {\r\n            console.log(error);\r\n            this.setState({\r\n                errMessage: error.message\r\n            })\r\n        })\r\n    }\r\n\r\n    updatePosts = (newPosts) => {\r\n        this.setState({\r\n            posts: newPosts\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { posts } = this.state\r\n\r\n        if (this.state.errMessage) {\r\n            return (\r\n                <div style={{ color: 'red' }}>\r\n                    {this.state.errMessage}\r\n                </div>\r\n            )\r\n        } else\r\n            return (\r\n                <div>\r\n                    <table id='posts_Tbl'>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Post Id</th>\r\n                                <th>Post Title</th>\r\n                                <th>Actions</th>\r\n                            </tr>\r\n                        </thead>\r\n\r\n                        <tbody>\r\n                            {\r\n                                posts.map(post =>\r\n                                    <tr key={post.id}>\r\n                                        <td>{post.id}</td>\r\n                                        <td>{post.title}</td>\r\n                                        <td>\r\n                                            <DeletePost posts={this.state.posts} postId={post.id} handler={this.updatePosts}></DeletePost>\r\n                                        </td>\r\n                                    </tr>)\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            )\r\n    }\r\n}\r\n\r\nexport default ListPosts;","import React, { Component } from 'react'\r\nimport '../common/common.css'\r\nimport ListPosts from '../listPosts/listPosts'\r\n\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n            message: '',\r\n            isLoggedIn: false\r\n        }\r\n    }\r\n\r\n    login = () => {\r\n        var msgs = this.validateCredentials();\r\n        this.setState({ message: msgs }, () => {\r\n            if (this.state.message)\r\n                return;\r\n\r\n            this.setState({ isLoggedIn: true })\r\n        });\r\n    }\r\n\r\n    validateCredentials = () => {\r\n        var msgs = '';\r\n\r\n        if (this.state.username == '' || this.state.password == '') {\r\n            msgs = 'username, passowrd are required';\r\n        } else if (this.state.username != 'admin' || this.state.password != 'admin') {\r\n            msgs = 'username or passowrd is invalid, For testing, you can use admin/admin';\r\n        }\r\n\r\n        return msgs;\r\n    }\r\n\r\n    render() {\r\n        if (this.state.isLoggedIn) {\r\n            return (\r\n                <React.Fragment>\r\n                    <span className=\"successLogin\">\r\n                        Welcome: {this.state.username}\r\n                    </span>\r\n                   \r\n                    <ListPosts />\r\n                </React.Fragment>\r\n            )\r\n        } else\r\n            return (\r\n                <div>\r\n                    <div className='errorMsg' style={{ height: '30px', marginTop: '10px' }}>\r\n                        {this.state.message}\r\n                    </div>\r\n\r\n                    <table>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>UserName:</td>\r\n\r\n                                <td>\r\n                                    <input id=\"username\" type=\"text\"\r\n                                        value={this.state.username}\r\n                                        onChange={(event) => this.setState({ username: event.target.value })} />\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Password:</td>\r\n                                <td>\r\n                                    <input id=\"password\" type=\"password\"\r\n                                        value={this.state.password}\r\n                                        onChange={(event) => this.setState({ password: event.target.value })} />\r\n                                </td>\r\n                            </tr>\r\n                           \r\n                            <tr>\r\n                                <td></td>\r\n                                <td>\r\n                                    <button onClick={this.login}>Login</button>\r\n                                    {/*  \r\n                                1- should be arrow handler function to see this.xyz\r\n                                    <button onClick={this.login}>Login</button>\r\n                                2- can be arrow handler/ normal js function to see this.xyz\r\n                                    <button onClick={() => this.login()}>Login</button>\r\n                                3- can be arrow handler/ normal js function to see this.xyz\r\n                                    <button onClick={(event) => this.login(event)}>Login</button>\r\n                            */}\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            )\r\n    }\r\n}\r\n\r\nexport default Login","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Login from './components/login/login';\n\nfunction App() {\n  return (\n    /*<div className=\"App\">\n      <header className=\"App-header\">\n        <h>Hello From App component</h>\n        <Welcome />\n        <Greet />\n      </header>\n    </div>\n  */\n\n  <Login />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}